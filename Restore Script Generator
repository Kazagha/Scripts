/*
       dBBBBBBBBBBBBBBBBBBBBBBBBb
      BP YBBBBBBBBBBBBBBBBBBBBBBBb
     dB   YBBb Restore Script YBBBb
     dB    YBBb    Generator   YBBBb
      Yb    YBBBBBBBBBBBBBBBBBBBBBBBb
       Yb    YBBBBBBBBBBBBBBBBBBBBBBBb        
        Yb    YBBBBBBBBBBBBBBBBBBBBBBBb
         Yb    YBBBBBBBBBBBBBBBBBBBBBBBb      
          Yb    YBBBBBBBBBBBBBBBBBBBBBBBb
           Yb   dBBBBBBBBBBBBBBBBBBBBBBBBb
            Yb dP=======================/
             YbB=======================(
              Ybb=======================\
               Y888888888888888888DSI8888b

	Author: Kazagha
  Date: 22/01/2014
  Current Revision: 1
  ___________________________________________________________________
	| 01 | Fetch Information from Database								|
	| 02 | Fetch Information from Backup File							|
	| 03 | Generate Restore Script										    |

*/

/*	Script:			01																				*/
/*	Description:	Fetch information from database													*/
/*					This query returns the name, and physical location of a specific database		*/
	USE database_name
	SELECT name AS 'Logical Name', 
		   physical_name
	FROM sys.database_files;
  
/*	Script:			02																				*/
/*	Description:	Fetch information from Backup File												*/
/*					This query returns the name, and physical location of a specific database		*/

	DECLARE @fileName NVARCHAR(500)
	SET @fileName = '\\path\to\backup.bak'
	RESTORE FILELISTONLY FROM DISK = @fileName;

/*	Script:			03																				*/
/*	Description:	Generate Restore Script															*/
/*					This script will generate a restore script, that restores from the latest		*/
/*					database backup, including log files.											*/
/*																									*/
/*					This script can restore into another database.									*/
/*																									*/
/*					Complete all required fields in section two, then execute the script.			*/

	USE Master;
	GO 
	SET NOCOUNT ON

	-- 1 - Variable declaration
	DECLARE @dbRestoreName sysname
	DECLARE @dbRestoreLocation NVARCHAR(100)
	DECLARE @logRestoreLocation NVARCHAR(100)
	DECLARE @backupName sysname
	DECLARE @backupRowDataLogical NVARCHAR(100)
	DECLARE @backupLogLogical NVARCHAR(100)
	DECLARE @backupPath NVARCHAR(500)
	DECLARE @cmd NVARCHAR(500)
	DECLARE @fileList TABLE (backupFile NVARCHAR(255))
	DECLARE @lastFullBackup NVARCHAR(500)
	DECLARE @lastDiffBackup NVARCHAR(500)
	DECLARE @backupFile NVARCHAR(500)

	-- 2 - Initialize variables

		--Set restore name and location
	SET @dbRestoreName = 'database_name'
	SET @dbRestoreLocation ='Y:\database.mdf'
	SET @logRestoreLocation ='Z:\logfile.ldf'

		--Set backup name, directory and logical names
	SET @backupName = 'database_name'
	SET @backupPath = '\\path\to\directory'
	SET @backupRowDataLogical = 'database logical name'
	SET @backupLogLogical = 'log logical name'

	-- 3 - get list of files
	SET @cmd = 'DIR /B "' + @backupPath + '"'

	INSERT INTO @fileList(backupFile)
	EXEC master.sys.xp_cmdshell @cmd

	-- 4 - Find latest full backup
	SELECT @lastFullBackup = MAX(backupFile) 
	FROM @fileList 
	WHERE backupFile LIKE '%.bak' 
	   AND backupFile LIKE @backupName + '%'
	      
	SET @cmd = 'RESTORE DATABASE ' + @dbRestoreName + ' FROM DISK = ''' 
		   + @backupPath + @lastFullBackup + ''' WITH NORECOVERY, REPLACE, ' 
	PRINT @cmd

	SET @cmd = '	MOVE ''' + @backupRowDataLogical + ''' TO ''' + @dbRestoreLocation + ''', '
		   + 'MOVE ''' + @backupLogLogical + ''' TO ''' + @logRestoreLocation + ''';' 
	PRINT @cmd
	       
	-- 4 - Find latest diff backup
	SELECT @lastDiffBackup = MAX(backupFile) 
	FROM @fileList 
	WHERE backupFile LIKE '%.dif' 
	   AND backupFile LIKE @backupName + '%'
	   AND backupFile > @lastFullBackup

	-- check to make sure there is a diff backup
	IF @lastDiffBackup IS NOT NULL
	BEGIN
	   SET @cmd = 'RESTORE DATABASE ' + @dbRestoreName + ' FROM DISK = ''' 
		   + @backupPath + @lastDiffBackup + ''' WITH NORECOVERY'
	   PRINT @cmd
	   SET @lastFullBackup = @lastDiffBackup
	END

	-- 5 - check for log backups
	DECLARE backupFiles CURSOR FOR 
	   SELECT backupFile 
	   FROM @fileList
	   WHERE backupFile LIKE '%.trn' 
	   AND backupFile LIKE @backupName + '%'
	   AND backupFile > @lastFullBackup

	OPEN backupFiles 

	-- Loop through all the files for the database 
	FETCH NEXT FROM backupFiles INTO @backupFile 

	WHILE @@FETCH_STATUS = 0 
	BEGIN 
	   SET @cmd = 'RESTORE LOG ' + @dbRestoreName + ' FROM DISK = ''' 
		   + @backupPath + @backupFile + ''' WITH NORECOVERY'
	   PRINT @cmd
	   FETCH NEXT FROM backupFiles INTO @backupFile 
	END

	CLOSE backupFiles 
	DEALLOCATE backupFiles 

	-- 6 - put database in a useable state
	SET @cmd = 'RESTORE DATABASE ' + @dbRestoreName + ' WITH RECOVERY'
	PRINT @cmd 

